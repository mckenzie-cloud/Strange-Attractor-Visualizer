
/*
* Code for solving for Lotka Volterra and Van der Pol equations
*/


/*

void LotkaVolterra(long double t, std::vector<long double> &X, std::vector<long double> &Ks)
{
    // Circles represent prey and predator initial conditions from x = y = 0.9 to 1.8, in steps of 0.1. The fixed point is at (1, 1/2).
    
    // long double alpha = 2.0 / 3.0, beta = 4.0 / 3.0, gamma = 1.0, delta = 1.0;
    long double alpha = 2.0/3, beta = 4.0 / 3.0, gamma = 1.0, delta = 1.0;
    Ks[0] = alpha * X[0] - beta * X[0] * X[1];
    Ks[1] = delta * X[0] * X[1] - gamma * X[1];
}

long double mu = 0.01;

void VanDerPol(long double t, std::vector<long double> &X, std::vector<long double> &Ks)
{
    Ks[0] = X[1];
    Ks[1] = mu * (1.0 - X[0] * X[0]) * X[1] - X[0];
}

*/



// std::vector<Solver> arr;

// std::cout << "Choose one to model: [1] Lotka Volterra [2] Van der Pol" << std::endl;
// int model;
// std::cin >> model;

// std::cout << "Change settings? [1] No. leave default [2] Yes " << std::endl;
// int change_settings;
// std::cin >> change_settings;

// if (change_settings == 2)
// {
//     std::cout << "set the abs and rel tolerance" << std::endl;
//     std::cin >> absTol >> relTol;

//     std::cout << "Choose the timestepping method: [0 - 7] STANDARD, H211PI, H211B, H312B, H312PID, H0321, H321, PI42 " << std::endl;
//     int method;
//     std::cin >> method;

//     switch (method)
//     {
//     case 0:
//         controller = StepSizeController::STANDARD;
//         break;
//     case 1:
//         controller = StepSizeController::H211PI;
//         break;
//     case 2:
//         controller = StepSizeController::H211B;
//         break;
//     case 3:
//         controller = StepSizeController::H312B;
//         break;
//     case 4:
//         controller = StepSizeController::H312PID;
//         break;
//     case 5:
//         controller = StepSizeController::H0321;
//         break;
//     case 6:
//         controller = StepSizeController::H321;
//         break;
//     case 7:
//         controller = StepSizeController::PI42;
//         break;
//     default:
//         std::cout << "\nInvalid method. Please Try Again!" << std::endl;
//         break;
//     }
// }

// std::cout << "Scale: " << std::endl;
// std::cin >> scalingFactor;

// if (model == 1)
// {
//     for (long double i = 0.9; i <= 1.8; i += 0.1)
//     {
//         /* Lotka Volterra */
//         std::vector<long double> y0 = {i, i};
//         Solver solver(controller, LotkaVolterra, y0, t0, tFinal, 1e-9, 1e-9);
//         solver.solve();
//         arr.push_back(solver);
//     }
// }

// if (model == 2)
// {
//     std::array<long double, 9> mu_params = {0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0};

//     for (long double i = 0; i < mu_params.size(); i++)
//     {
//         /* Van der pool */
//         std::vector<long double> y0 = {2.0, 0.0};
//         Solver solver(controller, VanDerPol, y0, t0, tFinal, 1e-9, 1e-9);
//         solver.solve();
//         arr.push_back(solver);

//         mu = mu_params[i];
//     }
// }




///....................................................................................................
// for (size_t j = 0; j < arr.size(); j++)
// {
//     /* code */
//     for (size_t i = 0; i < arr[j].m_yOut.size() - 1; i++)
//     {
//         /* code */
//         sf::Vertex line[] =
//             {
//                 sf::Vertex(sf::Vector2f((WINDOW_WIDTH / 2 + arr[j].m_yOut[i][0] * scalingFactor), WINDOW_HEIGHT / 2 + (arr[j].m_yOut[i][1] * scalingFactor * -1.0))),
//                 sf::Vertex(sf::Vector2f((WINDOW_WIDTH / 2 + arr[j].m_yOut[i + 1][0] * scalingFactor), WINDOW_HEIGHT / 2 + (arr[j].m_yOut[i + 1][1] * scalingFactor * -1.0)))};

//         window.draw(line, 2, sf::Lines);
//     }
// }

// // draw function with respect to time
// for (size_t j = 0; j < arr.size(); j++)
// {
//     /* code */
//     for (size_t i = 0; i < arr[j].m_yOut.size() - 1; i++)
//     {
//         /* code */
//         sf::Vertex line[] =
//             {
//                 sf::Vertex(sf::Vector2f((arr[j].m_tOut[i] * f_scaling_fact), (WINDOW_HEIGHT - 100) + (arr[j].m_yOut[i][0] * f_scaling_fact * -1.0))),
//                 sf::Vertex(sf::Vector2f((arr[j].m_tOut[i + 1] * f_scaling_fact), (WINDOW_HEIGHT - 100) + (arr[j].m_yOut[i + 1][0] * f_scaling_fact * -1.0)))};

//         window.draw(line, 2, sf::Lines);
//     }
// }